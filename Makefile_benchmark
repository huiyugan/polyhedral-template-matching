# Generic GNUMakefile

# Just a snippet to stop executing under other make(1) commands
# that won't understand these lines
ifneq (,)
This makefile requires GNU Make.
endif

PROGRAM = benchmark
CPP_FILES = main.cpp canonical.cpp graph_data.cpp convex_hull_incremental.cpp \
	index_ptm.cpp alloy_types.cpp deformation_gradient.cpp \
	normalize_vertices.cpp \
	polar_decomposition.cpp \
	qcprot/qcprot.cpp qcprot/quat.cpp unittest.cpp\
	neighbour_ordering.cpp voronoi/cell.cpp

#COBJS := $(patsubst %.c, %.o, $(C_FILES))
CPPOBJS := $(patsubst %.cpp, %.o, $(CPP_FILES))
LDFLAGS =
LDLIBS = -lm #-fno-omit-frame-pointer -fsanitize=address

#CC = gcc
CPP = g++

HEADER_FILES = alloy_types.hpp canonical.hpp convex_hull_incremental.hpp \
	deformation_gradient.hpp graph_data.hpp index_ptm.h \
	normalize_vertices.hpp \
	fundamental_mappings.hpp \
	polar_decomposition.hpp \
	qcprot/qcprot.hpp qcprot/quat.hpp \
	neighbour_ordering.hpp \
	voronoi/cell.hpp

OBJDIR = .

#C_OBJECT_FILES = $(C_SRC_FILES:%.c=$(OBJDIR)/%.o) 
CPP_OBJECT_FILES = $(CPP_SRC_FILES:%.cpp=$(OBJDIR)/%.o) 
C_OBJECT_MODULE_FILE = $(C_SRC_MODULE_FILE:%.c=$(OBJDIR)/%.o) 

#CFLAGS = -std=c99 -g -O3 -Wall -Wextra #-fno-omit-frame-pointer -fsanitize=address
CPPFLAGS = -g -O3 -std=c++11 -Wall -Wextra #-fno-omit-frame-pointer -fsanitize=address


all: $(PROGRAM)

#$(PROGRAM): $(COBJS) $(CPPOBJS)
#	$(CC) -c $(CFLAGS) $(COBJS)
#	$(CPP) -c $(CPPFLAGS) $(CPPOBJS)
#	$(CPP) $(COBJS) $(CPPOBJS) -o $(PROGRAM) $(LDLIBS) $(LDFLAGS)

$(PROGRAM): $(CPPOBJS)
	$(CPP) -c $(CPPFLAGS) $(CPPOBJS)
	$(CPP) $(CPPOBJS) -o $(PROGRAM) $(LDLIBS) $(LDFLAGS)

# These are the pattern matching rules. In addition to the automatic
# variables used here, the variable $* that matches whatever % stands for
# can be useful in special cases.
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

%: %.c
	$(CC) $(CFLAGS) -o $@ $<


