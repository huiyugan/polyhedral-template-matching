#ifndef PTM_DEFORMATION_GRADIENT_H
#define PTM_DEFORMATION_GRADIENT_H

#include <stdint.h>
#include "ptm_constants.h"

namespace ptm {

void calculate_deformation_gradient(int num_points, const double (*ideal_points)[3], int8_t* mapping, double (*normalized)[3], const double (*penrose)[3], double* F, double* res);

//sc
//#define k_sc 0.5
const double penrose_sc[PTM_NUM_POINTS_SC][3] = {	
{  0.000000000000000,  0.000000000000000,  0.000000000000000 },
{  0.000000000000000,  0.000000000000000, -0.500000000000000 },
{  0.000000000000000,  0.000000000000000,  0.500000000000000 },
{  0.000000000000000, -0.500000000000000,  0.000000000000000 },
{  0.000000000000000,  0.500000000000000,  0.000000000000000 },
{ -0.500000000000000,  0.000000000000000,  0.000000000000000 },
{  0.500000000000000,  0.000000000000000,  0.000000000000000 }
				};

//fcc
#define k_fcc 0.17677669529663678216
const double penrose_fcc[PTM_NUM_POINTS_FCC][3] = {
{  0.000000000000000,  0.000000000000000,  0.000000000000000 },
{  0.176776695296637,  0.176776695296637,  0.000000000000000 },
{  0.000000000000000,  0.176776695296637,  0.176776695296637 },
{  0.176776695296637,  0.000000000000000,  0.176776695296637 },
{ -0.176776695296637, -0.176776695296637,  0.000000000000000 },
{  0.000000000000000, -0.176776695296637, -0.176776695296637 },
{ -0.176776695296637,  0.000000000000000, -0.176776695296637 },
{ -0.176776695296637,  0.176776695296637,  0.000000000000000 },
{  0.000000000000000, -0.176776695296637,  0.176776695296637 },
{ -0.176776695296637,  0.000000000000000,  0.176776695296637 },
{  0.176776695296637, -0.176776695296637,  0.000000000000000 },
{  0.000000000000000,  0.176776695296637, -0.176776695296637 },
{  0.176776695296637,  0.000000000000000, -0.176776695296637 }
				};

//hcp
#define k_hcp 0.17677669529663678216
const double penrose_hcp[PTM_NUM_POINTS_HCP][3] = {
{  0.000000000000000,  0.000000000000000,  0.000000000000000 },
{  0.125000000000000, -0.216506350946110,  0.000000000000000 },
{ -0.250000000000000,  0.000000000000000,  0.000000000000000 },
{ -0.125000000000000,  0.072168783648703, -0.204124145231931 },
{  0.125000000000000,  0.072168783648703, -0.204124145231931 },
{  0.000000000000000, -0.144337567297406, -0.204124145231931 },
{ -0.125000000000000,  0.216506350946110,  0.000000000000000 },
{  0.125000000000000,  0.216506350946110,  0.000000000000000 },
{  0.250000000000000,  0.000000000000000,  0.000000000000000 },
{ -0.125000000000000, -0.216506350946110,  0.000000000000000 },
{  0.000000000000000, -0.144337567297406,  0.204124145231931 },
{  0.125000000000000,  0.072168783648703,  0.204124145231931 },
{ -0.125000000000000,  0.072168783648703,  0.204124145231931 }
				};

//ico
#define k_ico 0.13143277802974323576
#define phi 1.61803398874989490253
//((1.0 + sqrt(5)) / 2)
const double penrose_ico[PTM_NUM_POINTS_ICO][3] = {
{  0.000000000000000,  0.000000000000000,  0.000000000000000 },
{  0.000000000000000,  0.000000000000000,  0.250000000000000 },
{  0.000000000000000,  0.000000000000000, -0.250000000000000 },
{ -0.131432778029783,  0.180901699437495, -0.111803398874989 },
{  0.131432778029783, -0.180901699437495,  0.111803398874989 },
{  0.000000000000000, -0.223606797749979, -0.111803398874989 },
{  0.000000000000000,  0.223606797749979,  0.111803398874989 },
{  0.212662702088010, -0.069098300562505, -0.111803398874989 },
{ -0.212662702088010,  0.069098300562505,  0.111803398874989 },
{ -0.212662702088010, -0.069098300562505, -0.111803398874989 },
{  0.212662702088010,  0.069098300562505,  0.111803398874989 },
{  0.131432778029783,  0.180901699437495, -0.111803398874989 },
{ -0.131432778029783, -0.180901699437495,  0.111803398874989 }
				};

//bcc
#define k_bcc 0.11543038598460284017
const double penrose_bcc[PTM_NUM_POINTS_BCC][3] = {
{  0.000000000000000,  0.000000000000000,  0.000000000000000 },
{  0.115430385984603,  0.115430385984603,  0.115430385984603 },
{ -0.115430385984603,  0.115430385984603,  0.115430385984603 },
{  0.115430385984603,  0.115430385984603, -0.115430385984603 },
{ -0.115430385984603, -0.115430385984603,  0.115430385984603 },
{  0.115430385984603, -0.115430385984603,  0.115430385984603 },
{ -0.115430385984603,  0.115430385984603, -0.115430385984603 },
{ -0.115430385984603, -0.115430385984603, -0.115430385984603 },
{  0.115430385984603, -0.115430385984603, -0.115430385984603 },
{  0.230860771969206,  0.000000000000000,  0.000000000000000 },
{ -0.230860771969206,  0.000000000000000,  0.000000000000000 },
{  0.000000000000000,  0.230860771969206,  0.000000000000000 },
{  0.000000000000000, -0.230860771969206,  0.000000000000000 },
{  0.000000000000000,  0.000000000000000,  0.230860771969206 },
{  0.000000000000000,  0.000000000000000, -0.230860771969206 }
				};

//dcub
#define kdcub 0.07095369570691034689
const double penrose_dcub[PTM_NUM_POINTS_DCUB][3] = {
					{          0,          0,          0 },
					{     -kdcub,      kdcub,      kdcub },
					{     -kdcub,     -kdcub,     -kdcub },
					{      kdcub,     -kdcub,      kdcub },
					{      kdcub,      kdcub,     -kdcub },
					{ -2 * kdcub,          0,  2 * kdcub },
					{ -2 * kdcub,  2 * kdcub,          0 },
					{          0,  2 * kdcub,  2 * kdcub },
					{ -2 * kdcub, -2 * kdcub,          0 },
					{ -2 * kdcub,          0, -2 * kdcub },
					{          0, -2 * kdcub, -2 * kdcub },
					{          0, -2 * kdcub,  2 * kdcub },
					{  2 * kdcub, -2 * kdcub,          0 },
					{  2 * kdcub,          0,  2 * kdcub },
					{          0,  2 * kdcub, -2 * kdcub },
					{  2 * kdcub,          0, -2 * kdcub },
				 	{  2 * kdcub,  2 * kdcub,          0 },
				};


#define kdhex 0.04730246380471011397
const double penrose_dhex[PTM_NUM_POINTS_DHEX][3] = {
					{          0,          0,           0 },
					{     -kdcub,     -kdcub,      -kdcub },
					{      kdcub,     -kdcub,       kdcub },
					{     -kdcub,      kdcub,       kdcub },
					{      kdcub,      kdcub,      -kdcub },
					{     -kdhex, -4 * kdhex,      -kdhex },
					{ -4 * kdhex,     -kdhex,      -kdhex },
					{     -kdhex,     -kdhex,  -4 * kdhex },
					{  2 * kdcub,          0,   2 * kdcub },
					{  2 * kdcub, -2 * kdcub,           0 },
					{          0, -2 * kdcub,   2 * kdcub },
					{          0,  2 * kdcub,   2 * kdcub },
					{ -2 * kdcub,  2 * kdcub,           0 },
					{ -2 * kdcub,          0,   2 * kdcub },
					{  2 * kdcub,  2 * kdcub,           0 },
					{          0,  2 * kdcub,  -2 * kdcub },
					{  2 * kdcub,          0,  -2 * kdcub },
				};
}

#endif


